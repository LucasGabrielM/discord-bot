import { RainlinkSearchOptions, RainlinkSearchResult } from 'rainlink';
import { Rainlink } from 'rainlink';
import { SourceRainlinkPlugin } from 'rainlink';
import { RainlinkPluginType } from 'rainlink';
export interface DeezerPluginOptions {
    market?: string;
}
export declare class RainlinkPlugin extends SourceRainlinkPlugin {
    protected options: DeezerPluginOptions;
    private manager;
    private _search?;
    private readonly methods;
    /**
     * Source identify of the plugin
     * @returns string
     */
    sourceIdentify(): string;
    /**
     * Source name of the plugin
     * @returns string
     */
    sourceName(): string;
    /**
     * Type of the plugin
     * @returns RainlinkPluginType
     */
    type(): RainlinkPluginType;
    /**
     * Initialize the plugin.
     */
    constructor(options?: DeezerPluginOptions);
    /**
     * load the plugin
     * @param rainlink The rainlink class
     */
    load(manager: Rainlink): void;
    /**
     * Unload the plugin
     * @param rainlink The rainlink class
     */
    unload(rainlink: Rainlink): void;
    /** Name function for getting plugin name */
    name(): string;
    /**
     * Search tracks or playlists using rainlink search.
     * @param query URI or track name query
     * @param options search option like RainlinkSearchOptions
     * @returns RainlinkSearchResult
     * @description
     * Checks if the query is a direct link or a search query.
     * If it's a direct link, it'll use the direct search function.
     * If it's a search query, it'll use the rainlink search function.
     * If the rainlink search function doesn't return any tracks, it'll use the direct search function.
     */
    protected search(query: string, options?: RainlinkSearchOptions): Promise<RainlinkSearchResult>;
    /**
     * Directly search from plugin
     * @param query URI or track name query
     * @param options search option like RainlinkSearchOptions
     * @returns RainlinkSearchResult
     */
    searchDirect(query: string, options?: RainlinkSearchOptions | undefined): Promise<RainlinkSearchResult>;
    private searchTrack;
    private getTrack;
    private getAlbum;
    private getPlaylist;
    private filterNullOrUndefined;
    private buildSearch;
    private buildRainlinkTrack;
    private debug;
}
//# sourceMappingURL=plugin.d.ts.map